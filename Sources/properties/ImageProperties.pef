#include "Core/PropertyCore.h"
#include "Core/PropertyGUI.h"
//#include "PropertyABColor.h"
#include_cpp <QFileDialog>
#include_cpp "propertyconstructor.h"
#include_cpp "../CommonObjects.h"

//#include "../utils/QtnProperty/Demo/AB/PropertyABColor.h"
//#include_cpp "propertydelegateabfloatslider.h"

enum COLOR
{
    red (1, "red"),
    blue (2, "blue"),
    green (3, "green")
}

enum COLOR_FILTER
{
    None(1, "None"),
    Noise(2, "Noise Filter"),
    Color(3, "Color Filter")
}

enum COLOR_FILTER_METHOD
{
    Angle1(1, "Angle based #1"),
    Angle2(2, "Angle based #2"),
    Distance(3, "Distance based")
}

enum SHADINGMODEL
{
        pbr(0, "PBR shading"),
        bumpMapping(1, "Bump mapping")
}


enum BASEMAPDETAIL
{
        Small(0, "Small"),
        Medium(1, "Medium"),
        Big(2, "Big"),
        Huge(3, "Huge")
}

enum BLENDINGMODE
{
  blendNormal(0, "Normal"),
  blendMultiply(1, "Multiply"),
  blendAdd(2, "Add"),
  blendSubtract(3, "Subtract"),
  blendDifference(4, "Difference"),
  blendDivide(5, "Divide"),
  blendScreen(6, "Screen"),
  blendOverlay(7, "Overlay"),
  blendDodge(8, "Dodge"),
  blendBurn(9, "Burn"),
  blendDarkenOnly(10, "Darken Only"),
  blendLightenOnly(11, "Lighten Only")
}

enum INPUTIMAGE
{
  inputCurrent(0, "Current image"),
  inputHeightInput(1, "Height (Input)"),
  inputHeightOutput(2, "Height (Output)")
}

property_set ColorComponentsProperty{

Bool InvertAll {
        description = "Invert all components";
        value=false;

        slot propertyDidChange
        {
            InvertRed.setValue(InvertAll.value());
            InvertBlue.setValue(InvertAll.value());
            InvertGreen.setValue(InvertAll.value());
        }
}

Bool InvertRed {
        description = "Invert red";
        value=false;
}

Bool InvertBlue {
        description = "Invert red";
        value=false;
}

Bool InvertGreen {
        description = "Invert red";
        value=false;
}

} // end of color property

property_set GrayScaleProperty{
    Bool EnableGrayScale {
           description = "Enable";
           value=false;

           slot propertyDidChange
           {
               GrayScaleR.switchState(QtnPropertyStateInvisible, !EnableGrayScale);
               GrayScaleG.switchState(QtnPropertyStateInvisible, !EnableGrayScale);
               GrayScaleB.switchState(QtnPropertyStateInvisible, !EnableGrayScale);
           }
    }

    Float GrayScaleR {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.333f;
        delegate ABFloatSlider{}
    }
    Float GrayScaleG {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.333f;
        delegate ABFloatSlider{}
    }
    Float GrayScaleB {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.333f;
        delegate ABFloatSlider{}
    }

}

property_set RemoveShadingProperty{

    Int RemoveShadingByGaussian {
            description = "";
            minValue=0;
            maxValue=100;
            stepValue=1;
            value=0.0;
            delegate ABIntSlider{}
    }
    Float AOCancellation {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float LowFrequencyFilterBlending {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float LowFrequencyFilterRadius {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
}



property_set ColorLevelsProperty{

    Bool EnableNormalization {
           description = "Enable";
           value=false;
    }
    Float MinValue {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float MaxValue {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=1.0f;
        delegate ABFloatSlider{}
    }
    Float DetailsRadius {
            description = "";
            minValue=0;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float Offset {
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }

}


property_set SurfaceDetailsProperty{

    Bool EnableSurfaceDetails {
           description = "Enable";
           value=false;
           slot propertyDidChange
           {
                WeightA.switchState(QtnPropertyStateInvisible, !EnableSurfaceDetails);
                WeightB.switchState(QtnPropertyStateInvisible, !EnableSurfaceDetails);
                Radius.switchState(QtnPropertyStateInvisible, !EnableSurfaceDetails);
                Contrast.switchState(QtnPropertyStateInvisible, !EnableSurfaceDetails);
                Amplifier.switchState(QtnPropertyStateInvisible, !EnableSurfaceDetails);
           }
    }
    Float WeightA {
            description = "";
            minValue=0;
            maxValue=40.0f;
            stepValue=0.1f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float WeightB {
            description = "";
            minValue=0;
            maxValue=40.0f;
            stepValue=0.1f;
            value=30.0f;
        delegate ABFloatSlider{}
    }
    Int Radius {
            description = "";
            minValue=0;
            maxValue=40;
            stepValue=1;
            value=30;
            delegate ABIntSlider{}
    }
    Float Contrast {
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float Amplifier {
            description = "";
            minValue=-10.0f;
            maxValue=10.0f;
            stepValue=0.1f;
            value=1.0f;
        delegate ABFloatSlider{}
    }
}

// ambient occlusion settings
property_set AOProperty{

    Int NumIters {
            description = "";
            minValue=0;
            maxValue=50;
            stepValue=1;
            value=10;
            delegate ABIntSlider{}
    }
    Float Intensity {
            description = "";
            minValue=0;
            maxValue=5.0f;
            stepValue=0.01f;
            value=0.5f;
        delegate ABFloatSlider{}
    }
    Float Bias {
            description = "";
            minValue=-4.0f;
            maxValue=4.0f;
            stepValue=0.01f;
            value=-1.5f;
        delegate ABFloatSlider{}
    }
    Float Depth {
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.2f;
        delegate ABFloatSlider{}
    }
}

// ambient occlusion settings
property_set GrungeMapProperty{

    Float OverallWeight {
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
            delegate ABFloatSlider{}
    }
    Int Randomize {
            description = "";
            minValue=0;
            maxValue=100;
            stepValue=1;
            value=0;
            delegate ABIntSlider{}
    }
    Float Scale {
            description = "";
            minValue=0.0f;
            maxValue=4.0f;
            stepValue=0.01f;
            value=1.0f;
        delegate ABFloatSlider{}
    }
    Float NormalWarp {
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    QString Patterns{
       description = "";
       value = "";
       delegate List
       {
           items = init_grunge_maps();
       }
    }
    Bool RandomTranslations {
            description = "";
            value=false;
    }
    Bool ReplotAll {
            description = "";
            value=false;
    }
}




property_set GrungeOnImageProperty{

    Enum BlendingMode
    {
      description = "Blending modes are same as in GIMP program.";
      enumInfo = &BLENDINGMODE::info();
      value = BLENDINGMODE::blendNormal;
    }

    Float ImageWeight {
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.5f;
            state = QtnPropertyStateInvisible;
        delegate ABFloatSlider{}
    }
    Float GrungeWeight {
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }

}

property_set NormalsMixerProperty{

    Bool EnableMixer
    {
      description = "Enable mixer";
      value = false;
        slot propertyDidChange
        {
             NormalImage.switchState(QtnPropertyStateInvisible, !EnableMixer);
             PasteFromClipboard.switchState(QtnPropertyStateInvisible, !EnableMixer);
             Depth.switchState(QtnPropertyStateInvisible, !EnableMixer);
             Scale.switchState(QtnPropertyStateInvisible, !EnableMixer);
             Angle.switchState(QtnPropertyStateInvisible, !EnableMixer);
             PosX.switchState(QtnPropertyStateInvisible, !EnableMixer);
             PosY.switchState(QtnPropertyStateInvisible, !EnableMixer);

        }
    }
    QString NormalImage
    {
        description = "Open normal image";
        value = "";
        delegate File
        {
            directory = FBOImageProporties::normalMixerFileName;
            invalidColor = QColor(Qt::red);
            acceptMode = QFileDialog::AcceptOpen;
            nameFilters = QStringList() << "All Images (*.png *.jpg  *.tga *.jpeg *.bmp  *.tif);; Images (*.png);; Images (*.jpg);; Images (*.tga);; Images (*.jpeg);; Images (*.bmp);; Images (*.tif);; All files (*.*)";
        }
    }

    Button PasteFromClipboard
    {
       description = "Paste from";
       delegate { title = "PasteFromClipboard"; }
    }

    Float Depth {
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float Scale{
            description = "";
            minValue=0.0f;
            maxValue=5.0f;
            stepValue=0.01f;
            value=1.0f;
        delegate ABFloatSlider{}
    }
    Float Angle{
            description = "";
            minValue=0.0f;
            maxValue=360.0f;
            stepValue=1.0f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float PosX{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float PosY{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }

}

property_set ConvertsionBaseMapLevelProperty
{
    Float Weight{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.3f;
        delegate ABFloatSlider{}
    }
    Float PreSmoothRadius{
            description = "";
            minValue=0.0f;
            maxValue=10.0f;
            stepValue=1.0f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float FilterRadius{
            description = "";
            minValue=0.0f;
            maxValue=10.0f;
            stepValue=1.0f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Int NumIters{
            description = "";
            minValue=0;
            maxValue=20;
            stepValue=1;
            value=1;
            delegate ABIntSlider{}
    }
    Float Amplitude{
            description = "";
            minValue=-5.0f;
            maxValue=5.0f;
            stepValue=0.1f;
            value=-1.0f;
        delegate ABFloatSlider{}
    }
    Float Flatness{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float Edges{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
    Float Blending{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.5f;
        delegate ABFloatSlider{}
    }

}

property_set BaseMapToOthersProperty{

    Bool EnableConversion
    {
            description = "Enable Conversion";
            value = false;
            slot propertyDidChange
            {
                ImageDetails.switchState(QtnPropertyStateInvisible, !EnableConversion);
                //CurrentLevel.switchState(QtnPropertyStateInvisible, !EnableConversion);
                EnableHeightPreview.switchState(QtnPropertyStateInvisible, !EnableConversion);
                AngleWeight.switchState(QtnPropertyStateInvisible, !EnableConversion);
                AngleCorrection.switchState(QtnPropertyStateInvisible, !EnableConversion);
                MinColor.switchState(QtnPropertyStateInvisible, !EnableConversion);
                MaxColor.switchState(QtnPropertyStateInvisible, !EnableConversion);
                ColorBalance.switchState(QtnPropertyStateInvisible, !EnableConversion);
                Convert.switchState(QtnPropertyStateInvisible, !EnableConversion);
            }
    }
    Bool EnableHeightPreview
    {
            description = "Enable Conversion";
            value = false;
    }
    Enum ImageDetails
    {
            description = "Blending modes are same as in GIMP program.";
            enumInfo = &BASEMAPDETAIL::info();
            value    = BASEMAPDETAIL::Small;
            slot propertyDidChange
            {
                switch(ImageDetails){
                    case(BASEMAPDETAIL::Small):
                        LevelSmall.switchState(QtnPropertyStateInvisible, !true || !EnableConversion);
                        LevelMedium.switchState(QtnPropertyStateInvisible,  true);
                        LevelBig.switchState(QtnPropertyStateInvisible,  true);
                        LevelHuge.switchState(QtnPropertyStateInvisible,  true);
                    break;
                    case(BASEMAPDETAIL::Medium):
                        LevelSmall.switchState(QtnPropertyStateInvisible, true);
                        LevelMedium.switchState(QtnPropertyStateInvisible,  !true || !EnableConversion);
                        LevelBig.switchState(QtnPropertyStateInvisible,  true);
                        LevelHuge.switchState(QtnPropertyStateInvisible,  true);
                    break;
                    case(BASEMAPDETAIL::Big):
                        LevelSmall.switchState(QtnPropertyStateInvisible, true);
                        LevelMedium.switchState(QtnPropertyStateInvisible,  true);
                        LevelBig.switchState(QtnPropertyStateInvisible,  !true || !EnableConversion);
                        LevelHuge.switchState(QtnPropertyStateInvisible,  true);
                    break;
                    case(BASEMAPDETAIL::Huge):
                        LevelSmall.switchState(QtnPropertyStateInvisible, true);
                        LevelMedium.switchState(QtnPropertyStateInvisible,  true);
                        LevelBig.switchState(QtnPropertyStateInvisible,  true);
                        LevelHuge.switchState(QtnPropertyStateInvisible,  !true || !EnableConversion);
                    break;
                }
            }
    }

    extern property_set ConvertsionBaseMapLevelProperty LevelSmall
    {
            description = "Small details";
            state = QtnPropertyStateInvisible;
    }
    extern property_set ConvertsionBaseMapLevelProperty LevelMedium
    {
            description = "Medium details";
            state = QtnPropertyStateInvisible;
    }
    extern property_set ConvertsionBaseMapLevelProperty LevelBig
    {
            description = "Big details";
            state = QtnPropertyStateInvisible;
    }
    extern property_set ConvertsionBaseMapLevelProperty LevelHuge
    {
            description = "Huge details";
            state = QtnPropertyStateInvisible;
    }
    Float AngleWeight{
            description = "";
            minValue=-5.0f;
            maxValue=5.0f;
            stepValue=0.1f;
            value=0.0f;
        delegate ABFloatSlider{}
    }

    Float AngleCorrection{
            description = "";
            minValue=0.0f;
            maxValue=360.0f;
            stepValue=1.0f;
            value=0.0f;
        delegate ABFloatSlider{}
    }

    QColor MinColor
    {
        description = "QColor property with RGB components";
        value = QColor(0, 0, 0);
        delegate { rgbSubItems = true; }
    }
//    ABColor MinColor
//    {
//        description = "ABColor property with RGB components";
//        value = QColor(0, 0, 0);

//        clickHandler = [](const QtnPropertyABColor* color) {
//            qDebug() << Q_FUNC_INFO << "Color has clicked: " << color;
//        };

//        delegate { rgbSubItems = false; }
//    }

    QColor MaxColor
    {
        description = "QColor property with RGB components";
        value = QColor(0, 0, 0);
        delegate { rgbSubItems = true; }
    }

    Float ColorBalance{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }

    Button Convert
    {
       delegate { title = "Convert"; }
    }
}

property_set RMColorFilterProperty{
    Bool InvertColors
    {
            description = "Invert Colors";
            value = false;
    }
    QColor PickColor
    {
        description = "QColor property with RGB components";
        value = QColor(0, 0, 0);
        delegate { rgbSubItems = true; }
    }
    Enum Method
    {
            description = "Method";
            enumInfo = &COLOR_FILTER_METHOD::info();
            value    = COLOR_FILTER_METHOD::Distance;
    }

    Float Bias{
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=-0.2f;
        delegate ABFloatSlider{}
    }

    Float Amplifier{
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.1f;
        delegate ABFloatSlider{}
    }

    Float Offset{
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }
}

property_set RMNoiseFilterProperty{

    Float Depth{
            description = "";
            minValue=0.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.2f;
        delegate ABFloatSlider{}
    }

    Float Treshold{
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.0f;
        delegate ABFloatSlider{}
    }

    Float Amplifier{
            description = "";
            minValue=-1.0f;
            maxValue=1.0f;
            stepValue=0.01f;
            value=0.1f;
        delegate ABFloatSlider{}
    }
}


property_set RMFilterProperty{

    Enum Filter
    {
            description = "Color filter.";
            enumInfo = &COLOR_FILTER::info();
            value    = COLOR_FILTER::None;

            slot propertyDidChange
            {
                switch(Filter){
                    case(COLOR_FILTER::None):
                        NoiseFilter.switchState(QtnPropertyStateInvisible,  true);
                        ColorFilter.switchState(QtnPropertyStateInvisible,  true);
                    break;
                    case(COLOR_FILTER::Noise):
                        NoiseFilter.switchState(QtnPropertyStateInvisible, !true);
                        ColorFilter.switchState(QtnPropertyStateInvisible,  true);
                    break;
                    case(COLOR_FILTER::Color):
                        NoiseFilter.switchState(QtnPropertyStateInvisible, true);
                        ColorFilter.switchState(QtnPropertyStateInvisible, !true);
                    break;
                }
            }
    }

    extern property_set RMNoiseFilterProperty NoiseFilter
    {
            description = "Noise Filter";
            state = QtnPropertyStateInvisible;
    }
    extern property_set RMColorFilterProperty ColorFilter
    {
            description = "Color Filter";
            state = QtnPropertyStateInvisible;
    }

}

property_set BasicProperty
{
    extern property_set GrayScaleProperty GrayScale
    {
        description = "Gray scale ";
//        state = QtnPropertyStateCollapsed;
        state = QtnPropertyStateInvisible;
    }

    extern property_set ColorComponentsProperty ColorComponents
    {
        description = "Components ";
        state = QtnPropertyStateCollapsed;
    }


    Float ColorHue {
            description = "Change color Hue";
            minValue=0;
            maxValue=1.f;
            stepValue=0.01f;
            value=0;
            state = QtnPropertyStateInvisible;
            delegate ABFloatSlider
            {
                fillColor = QColor::fromRgb(170, 170, 255);
            }

    }


    Int EnhanceDetails {
            description = "The same as above.";
            minValue=0;
            maxValue=10;
            stepValue=1;
            value=0;
            delegate ABIntSlider{}
    }
    Float SmallDetails {
            description = "<html><head/><body><p>Enhance small details. This option is connected with <span 	style=\" font-weight:600;\">Depth</span> scroll bar. </p><p>Note that if <span style=\" font-	weight:600;\">Depth</span> scroll bar is set to zero, this parameter does not affect the image.</p><	/body></html>";
            minValue=0;
            maxValue=1.f;
            stepValue=0.01f;
            value=0;
            delegate ABFloatSlider{}
    }
    Float MediumDetails {
            description = "The same as above.";
            minValue=0;
            maxValue=1.f;
            stepValue=0.01f;
            value=0;
            delegate ABFloatSlider
            {
                fillColor = QColor::fromRgb(170, 170, 255);
            }
    }

    Float DetailDepth {
            description = "<html><head/><body><p>It changes the depth of the <span style=\" font-weight:600;	\">Small details</span> and <span style=\" font-weight:600;\">Medium details</span> effect.</p></	body></html>";
            minValue=0;
            maxValue=1.f;
            stepValue=0.01f;
            value=0.1f;
            delegate ABFloatSlider
            {
                fillColor = QColor::fromRgb(170, 170, 255);
            }
    }

    Int SharpenBlur {
            description = "<html><head/><body><p>Smooth or sharpen the image (it uses the gaussian 	distribution  in both cases).</p></body></html>";
            minValue=-20;
            maxValue=20;
            stepValue=1;
            value=0;
            delegate ABIntSlider{}
    }
    Float NormalsStep {
            description = "";
            minValue=-5.0f;
            maxValue=5.0f;
            stepValue=0.05f;
            value=1.0f;
            state = QtnPropertyStateInvisible;
        delegate ABFloatSlider{}
    }

} // end of BasicProperty

property_set FormImageProp
{
    Int ImageType {
           description = "ImageTyp";
           value = MAX_TEXTURES_TYPE;
           state = QtnPropertyStateInvisible;

    }
    extern property_set GrungeOnImageProperty GrungeOnImage
    {
        description = "Grunge blending";
        state = QtnPropertyStateInvisible;
    }
    extern property_set GrungeMapProperty Grunge
    {
        description = "Grunge ";
        state = QtnPropertyStateInvisible;
    }
    extern property_set BasicProperty Basic
    {
        description = "Basic ";
        state = QtnPropertyStateInvisible;
    }

    Bool EnableRemoveShading {
           description = "Enable";
           value=false;
           state = QtnPropertyStateInvisible;

           slot propertyDidChange
           {
               RemoveShading.switchState(QtnPropertyStateInvisible, !EnableRemoveShading);
           }
    }
    extern property_set RemoveShadingProperty RemoveShading
    {
        description = "Components ";
        state = QtnPropertyStateInvisible;
    }
    extern property_set ColorLevelsProperty ColorLevels
    {
        description = "Color levels ";
        state = QtnPropertyStateInvisible;
    }


    extern property_set SurfaceDetailsProperty SurfaceDetails
    {
        description = "Surface details tools";
        state = QtnPropertyStateInvisible;
    }


    extern property_set AOProperty AO
    {
        description = "Ambient occlusion";
        state = QtnPropertyStateInvisible;
    }

    extern property_set NormalsMixerProperty NormalsMixer
    {
        description = "Normal mixer";
        state = QtnPropertyStateInvisible;
    }

    extern property_set BaseMapToOthersProperty BaseMapToOthers
    {
        description = "Convert to other images";
        state = QtnPropertyStateInvisible;
    }
    extern property_set RMFilterProperty RMFilter
    {
        description = "Roughness/Mettalic processing";
        state = QtnPropertyStateInvisible;
    }



}
